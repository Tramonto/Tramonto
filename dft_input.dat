********* DIMENSION PARAMETERS ************************************************
@ -1 -1 -1 -1 10.   Length_ref  Density_ref  Temp  Dielec_ref  VEXT_MAX

********* MESH PARAMETERS *****************************************************
@  1           Ndim
@  8.5         size_x(idim): idim=1,Ndim
@  0.025       Esize_x(idim): idim=1,Ndim
@ -1  0        Type_bc(x0,: left, right)  (-1=none, 0=rho_bulk, 1=pbc, 2=ref)
@  2  2        Type_bc(x1,: down, up)     (-1=none, 0=rho_bulk, 1=pbc, 2=ref)
@  2  2        Type_bc(x2,: back, front)  (-1=none, 0=rho_bulk, 1=pbc, 2=ref)

********* FUNCTIONAL SWITCHES *************************************************
@  0           Type_func (-1=No HS functional, 0=Rosen1, 1=Rosen2)
@ -1           Type_attr (-1=No attractions, 0=strict MF)
@ -1           Type_coul (-1=No coulomb, 0=strict MF, 
                           1=include 2nd order corrections)
@ -1           Type_poly (-1=No polymer, 0-3 different polymer formulations)
@  0           Lcompare_fastram

********* POTENTIAL TYPE SELECTIONS *******************************************
@  1           Ipot_wf_n (0=No_wall-fluid, 
                          1=Hard_wall, 
                          2=LJ9_3, 
                          3=normalized LJ9_3, 
                          4=LJ12_6, 
                          5=LJ_ATOMIC: atomic surfaces with 
                               LJ12-6 wf interactions,
                          6=stepped 9_3 (for 2D or 3D problems), 
                          7=HARD_EXP : hard wall + exponential
                          8=HARD_ATOMS hard surfaces AND some hard fixed atoms)
                         (need new type for LJ9_3 wall plus LJ atoms --
                          like case 8 for the hard systems)

********* SURFACE PARAMETERS **************************************************
@  1  1  1  0  Nwall_types  Nwall  Nlink  Lauto_center
@  0           Xtest_reflect_TF[ilink=0,Nlink][idim=0,Ndim]
@  0           Surf_type[iwall_type] ; iwall_type=0,Nwall_types
               (0 = smooth uniform planar wall of infinite extent, 
                1 = finite length smooth wall, 
                2 = bumpy_wall 
                3 = spheres(3D) or cylinders(2D) as colloids
                4 = cylinders (3D) (to compare w/ #3 in 2D)
                5 = a cylindrical pore (2D) spherical cavity (3D),
                6 = spheres or cylinders as atoms 
                     (uses Sigma_w rather than WallParam to define size).
                7 = finite length cylin/slit pores in 3D/2D
                8 = finite length conical pores in 3D/2D
                9 = periodic function superimposed on cylinder model
                10 = randomly placed colloidal cylinders (2D) 
                     or spheres (3D)

@  0           Orientation[iwall_type]:iwall_type=1,Nwall_type
               (0=normal perpendicular to left/right surfaces - 2D/3D
                1=normal perpendicular to top/bottom surfaces - 2D/3D
                2=normal perpendicular to front/back surfaces - 3D only
                     applicable to Surface_type = 0,1,2
                     surfaces 6,7: indicate long axis of pores.

@  0.5         WallParam[iwall_type], iwall_type=1,Nwall_type
                    if surf_type=0: enter wall thickness
                    if surf_type=1: enter wall length in x0 direction
                    if surf_type=2,3,4,5,6,8 : enter the radius of the 
                         feature of interest (bumps, cylinders, spheres,
                         cyl.pores).
                    if shape_surf = 7: enter left(LBB)-radius of cone

@  1.0         WallParm2[iwall_type]: iwall_type=1,Nwall_type
                    if surf_type=1 : enter wall length in x1 direction
                    if surf_type=6 : enter length in Orientation direction 
                    if surf_type=7 :  enter right(RTF)-radius of cone
                    if surf_type=8 : enter thickness of wall.

@  0.0         WallParm3[iwall_type]: iwall_type=1,Nwall_type
                    if surf_type=1  enter wall length in x2 direction
                    if surf_type=7: enter length in Orientation direction
                      
********* FLUID INTERACTION PARAMETERS ****************************************
@  1 0         Ncomp (no. of components) OR for polymers Nblock_tot 
               (number of polymer block groups)
               Mixing Rule Type (0=L-B, 1=manual input)
@  1.          Mass(icomp):icomp=1,Ncomp (Nblock_tot)
@  0.          Charge_f(icomp):icomp=1,Ncomp (Nblock_tot); Valence
@  1.          Sigma_ff(icomp,icomp):icomp=1,Ncomp (Nblock_tot)
@  1           Eps_ff(icomp,icomp):icomp=1,Ncomp (Nblock_tot)
@  1           Cutoff_ff(icomp,icomp):icomp=1,Ncomp (Nblock_tot)

@  1.          Rho_W[iwall_type]: in rho_sigma_w^3 units
@  1.          Sigma_w[iwall_type]:    iwall_type=1,Nwall_type
@  1.          Eps_w[iwall_type]:      iwall_type=1,Nwall_type
@  0.          Cut_ww[i][j]

@  0.          Sigma_wf[i][j] [i=0,Ncomp-1][j=0,Nwall_type-1]
@  0.          Eps_wf[i][j]
@  0.          Cut_wf[i][j]

    *Note for polymers: --- treat each segment (or block) TYPE as a distinct 
     component in this section => 1 for homopolymer, 2 for diblock or 
     ABA triblock, 3 for ABC triblock 3 for diblock with solvent, etc.

********* POLYMER INPUT PARAMETERS ********************************************
@  0           Npol_comp:  Number of (co)polymer components
@  0           Nblock[pol_number]:  Number of blocks in each copolymer
@  0  0        block[pol_number][iblock]:  Number of segments in each block 
@  0  0        block_type[iblock_tot]:  Segment types in each block (start 
                    w/0, must not skip)
@  none        poly_file:  File containing polymer connectivity
@  none        Cr_file:  c(r) filename
@  0.0         Cr_rad:  c(r) radius (units of sigma)
@  0.0         Gauss_a:  Aspect ratio ( gauss bl/sigma)

********* SEMI-PERMEABLE SURFACE PARAMETERS ***********************************
@  0           Lsemiperm[iwall_type][icomp]; [0][0],[0][1],...
                    [0][Ncomp][1][0]...
@  0.          Vext_membrane[iwall_type][icomp]; [0][0],[0][1],...
                    [0][Ncomp][1][0]...

    *Note for polymers: See note above. Again replace Ncomp with Nblock_tot.

********* STATE POINT PARAMETERS **********************************************
@  0.75        Rho_b[Icomp], Icomp = 1,Ncomp  (or Npol_comp for polymers)

    *Note for polymers:  
     Rho_b is indexed Npol_comp rather than Nblock_tot.  The code automatically
     converts to the density of the different polymer segments. For example: 
     For an ABC triblock in solvent you enter Rho_b[0],Rho_b[1] corresponding 
     to the polymer density and the solvent density.  The code converts them to
     Rho_b'[0-2] based on the first value, and Rho_b'[3] based on the 
     second entry.

********* CHARGED SURFACE BOUNDARY CONDITIONS *********************************

@  0           Type_bc_elec[iwall_type]: 0=neutral surface, 
                                         1=const potential,
                                         2=const surface charge,
                                         3=atomic charges
    *Note:  The read statement for this parameter has been removed for the 
     special case of hard spheres with charge

@  0.0         Elec_param_w[iwall_type]: iwall_type=1,Nwall_type: 
                    if Type_elec...=0, enter 0.0 for each surface
                    if Type_elec...=1, enter the surf. potentials
                    if Type_elec...=2, enter the surf. charges
                    if Type_elec...=3, enter the charge per wall atom type
@  0           Nlocal_charge # of local charges on surfaces not necessarily on 
                    every atom of a given type.  Or to approximate a local 
                    charge on a non-atomic surface. (-1 indicates linear 
                    profile of point charges between two point aligned with
                    principle axes.  !!!)

@  0.0         Charge_loc[i]: i=0-Nlocal_charge-1 : Value of charge
@  0.0         Charge_Diam[i] : diameter or spread of charge (=0 for 
                    point charge)
@  0.0         Charge_x[i][idim] : position of charge
@  0           Charge_type_atoms  Charge_type_local
                    0=point charge
                    1=smeared charge over sigma
                    2=background charge
                    For either Type_elec=3 or Nlocal_charge != 0.

********* DIELECTRIC CONSTANTS ************************************************
@  0           Type_dielec (0 = all the same; 
                            1 = fluid/walls different;
                            2 = bulk fluid/wall fluid/pore fluid;
                            3 = constant in walls; varies with density in 
                                fluid !)
@  0.  0.  0.  Dielec (bulk fluid)  Dielec (pore_fluid)  Distance from wall 
                    for "pore fluid"
@  0.0         Dielec_wall[i]  i=1,Nwall_type

********* STEADY STATE BOUNDARY CONDITIONS ************************************
@  0  0        Lsteady_state  Linear_transport
                    Lsteady_state (0=equilibrium problem, 1=steady state)
                    Linear_transport (0=nonlinear; 1=linear)
@  0 0  0.0    Grad_dim direction of gradient (0=x, 1=y, 2=z), L1D_bc, X_1D_bc
@  0.0         x_const_mu (on both sides of domain).
@  0   0       Geom_Flag; (0=unit area;1=cyl pore;2=vary pore) 
                    Nseg (# pore segments)
@  0.  0.  0.  Radius_L, Radius_R, Length
@  0.  0.      Rho_b_Left[Icomp]  B.C. on left or bottom or back
@  0.  0.      Rho_b_Right[Icomp] B.C. on right or top or front
@  0.          D_coef[icomp] Diffusion Coefficients per component (cm^2/sec)
@  0.  0.      Elec_pot_L, Elec_pot_R B.C. on elec. potential lbb and rtf
@  0.          Velocity 

********* STARTUP CONTROL PARAMETERS ******************************************
@  -1          Iliq_vap (-2=no coex -1=none,1=W-V, 2=W-L, 3=L-V profiles)
                    LJ wetting output
@  -3          Iguess
                    Iguess choices ...........
                    -3,-2,-1 = rho;  CONST_RHO, CONST_RHO_L, CONST_RHO_V
                    0, 1, 2  = rho*exp(-Vext/kT); EXP_RHO,EXP_RHO_L,EXP_RHO_V 
                    3, 4, 5  = rho*theta fnc; STEP_RHO, STEP_RHO_L, STEP_RHO_V
                    6        = rho*theta fnc for liq-vap prof; STEP_LV
                    7        = LINEAR (interpolation between left and right)
@  8.0         Thickness
@  0           Restart (0=no, 1=yes, 2=yes, but w/ step function, 3=yes for
                       densities but not elec.pot or chem.pot.)
                       (if 1 : densww.dat must exist)
@  1000        Rho_max 

********* OUTPUT FORMAT PARAMETERS ********************************************
           *************************************************************
           **** set how you would like all of the output to print ******
           *************************************************************
@  1  0        Lper_area Lprint_gofr
@  1           Print_rho_type (0= all output in densww.dat, 
                               1= each run gets a different file)
@  0  0        Print_rho_switch    Print_mesh_switch: 
               switches to determine how output will look in dft_force file
               rho: (0 - all densities, 1=p/po, 2=kappa, 3=all betamu)
               mesh: (0=surface separations, 1=wall positions)
@  0           Print_header:logical for printing the header in the
                    dft_force.dat file(s): 0=FALSE : 1=TRUE
@  1           IWRITE (0=MINIMAL 1=DENSITY_PROF 2=RHO_AVS 3=VERBOSE)

********* COARSENING SWITCHES *************************************************
@  1           Nzone (Coarsens Mesh/Jacobian by factor of 2)
@  2.0         Rmax_zone[Nzone-1] [0.0 for complete coarsening]
@  0           Mesh coarsening? (0=NO, 1=YES)
@  0  0.25     Coarser_jac; Esize_jacobian
                    0 =Jac. zones are the same as resid zones.
                    1 =coarsen finest Jacobian zone by fac of 2 
                    2 =coarsen all but coarsest zone by fac of 2
                    3 =use coarsest zone everywhere
                    4 =use 2nd coarsest zone in all but coarsest zone 
                    5 =use Esize_jacobian for all Jacobian integrals
@  0  100.     Ljac_cut   Jac_threshold
@  0           Matrix_fill_flag 
                    0= Exact Jacobian, 
                    1= Jac_Save1 (only rhobar2 and rhobar 3)
                    2= Jac_Save2 (rhobar 2,3 exact: rhobar 0,1 estimated)
                    3= Enumerated rhobar equations (all of them)
                    4= Enumerated rhobar equations (no vector terms)

********* NONLINEAR SOLVER PARAMETERS *****************************************
@  50               Maximum # of Newton Iterations
@  1.0e-3  1.0e-8   Relative and Absolute convergence tolerances
@  2                Load balance switch (0=linear,1=box,2=weights,3=timings)

********* LINEAR SOLVER PARAMETERS ********************************************
@  0 30        Solver (0=gmres, 1=cg, 2=tfqmr, 3=cg2, 4=bicgstab) 
               (for Solver=gmres second parameter is kspace which must be > 0)
@  0           Scaling (0=row_sum, 1=Jacobi, 2=symrow_sum, -1=none)
@  0 0         Preconditioner (0=ilu, 1=Jacobi, 2=symGS, 3=LSpoly3, -1=none)
               (second parameter is ilut_fill_param)
@  50 1.e-4    Max iterations and Tolerance for Linear Solver 

********* MESH CONTINUATION PARAMETERS ****************************************
           Here you enter information for mesh continuation.
           Loca does not do mesh continuation because it is not
           a continuous variable.
@  1           N_runs   
@  0.01        Del_1[idim=0 to Ndim]  How much to Box Length.
@  0  0        Plane_new_nodes     Pos_new_nodes 
               (0=yz,1=xz,2=xy)   (-1=lbb,0=center,1=rtf)
@  0. 2.       Guess_range[0,1]  parameters for mesh continuation
               Guess_range[0] is the surf separation to stop using 100% Rho_b
               Guess_range[1] is the surf separation to start using 100% X_old


********* LOCA CONTINUATION LIBRARY PARAMETERS ********************************
@ -1           Continuation Method (-1=None; 0,1,2=0th, 1st, arc-length 
                    3=Spinodal (Turning Point); 4=Binodal (Phase Eq))
@  0           Continuation parameter :  Scale_fac (for CONT_SCALE cases only)
                    CONT_TEMP        1   State Parameters
                    CONT_RHO_0       2
                    CONT_RHO_ALL     3
                    CONT_LOG_RHO_0   4
                    CONT_LOG_RHO_ALL 5
                    CONT_SCALE_RHO   6
                    
                    CONT_EPSW_0      7    Wall-Wall Energy Params
                    CONT_EPSW_ALL    8
                    CONT_SCALE_EPSW  9
                    
                    CONT_EPSWF00     10   Wall-Fluid Energy Params
                    CONT_EPSWF_ALL_0 11
                    CONT_SCALE_EPSWF 12
                        
                    CONT_EPSFF_00    13   Fluid-Fluid Energy Params
                    CONT_EPSFF_ALL   14
                    CONT_SCALE_EPSFF 15
                    
                    CONT_SCALE_CHG   16   Charged surface params


@  0           Parameter initial step size
@  0  0.0      N Steps,  Step Control Aggressiveness  (0.0 = constant step)
@  0           Second parameter for Spinodal and Binoadal Calculations 
               (Same list as above for continuation parameters).

************* END OF INPUT FILE ************************************************
